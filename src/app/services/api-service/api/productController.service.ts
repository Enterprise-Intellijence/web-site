/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AdminProductsBody } from '../model/adminProductsBody';
import { InlineResponse200 } from '../model/inlineResponse200';
import { OrderBasicDTO } from '../model/orderBasicDTO';
import { PageMessageDTO } from '../model/pageMessageDTO';
import { PageOfferBasicDTO } from '../model/pageOfferBasicDTO';
import { PageProductBasicDTO } from '../model/pageProductBasicDTO';
import { ProductBasicDTO } from '../model/productBasicDTO';
import { ProductCategory } from '../model/productCategory';
import { ProductsIdBody } from '../model/productsIdBody';
import { ProductsIdBody1 } from '../model/productsIdBody1';
import { V1ProductsBody } from '../model/v1ProductsBody';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ProductControllerService {

    protected basePath = 'https://localhost:8443';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createProduct(body: V1ProductsBody, observe?: 'body', reportProgress?: boolean): Observable<ProductsIdBody1>;
    public createProduct(body: V1ProductsBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProductsIdBody1>>;
    public createProduct(body: V1ProductsBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProductsIdBody1>>;
    public createProduct(body: V1ProductsBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createProduct.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ProductsIdBody1>('post',`${this.basePath}/api/v1/products`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProduct(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteProduct(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteProduct(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteProduct(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteProduct.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/products/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param token 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCapability(token: string, observe?: 'body', reportProgress?: boolean): Observable<AdminProductsBody>;
    public getCapability(token: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AdminProductsBody>>;
    public getCapability(token: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AdminProductsBody>>;
    public getCapability(token: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getCapability.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AdminProductsBody>('get',`${this.basePath}/api/v1/products/capability/${encodeURIComponent(String(token))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCapabilityUrl(id: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getCapabilityUrl(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getCapabilityUrl(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getCapabilityUrl(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCapabilityUrl.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/api/v1/products/capability/url/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCategoriesList(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCategoriesList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCategoriesList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCategoriesList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/products/categories`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param title 
     * @param description 
     * @param minProductCost 
     * @param maxProductCost 
     * @param brands 
     * @param condition 
     * @param views 
     * @param userId 
     * @param uploadDate 
     * @param availability 
     * @param productCategory 
     * @param primaryCat 
     * @param secondaryCat 
     * @param tertiaryCat 
     * @param likesNumber 
     * @param productGender 
     * @param sizes 
     * @param colour 
     * @param entertainmentLanguage 
     * @param homeMaterial 
     * @param page 
     * @param sizePage 
     * @param sortBy 
     * @param sortDirection 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFilteredProducts(title?: string, description?: string, minProductCost?: number, maxProductCost?: number, brands?: Array<string>, condition?: string, views?: number, userId?: string, uploadDate?: Date, availability?: string, productCategory?: ProductCategory, primaryCat?: string, secondaryCat?: string, tertiaryCat?: string, likesNumber?: number, productGender?: string, sizes?: Array<string>, colour?: string, entertainmentLanguage?: string, homeMaterial?: string, page?: number, sizePage?: number, sortBy?: string, sortDirection?: string, observe?: 'body', reportProgress?: boolean): Observable<PageProductBasicDTO>;
    public getFilteredProducts(title?: string, description?: string, minProductCost?: number, maxProductCost?: number, brands?: Array<string>, condition?: string, views?: number, userId?: string, uploadDate?: Date, availability?: string, productCategory?: ProductCategory, primaryCat?: string, secondaryCat?: string, tertiaryCat?: string, likesNumber?: number, productGender?: string, sizes?: Array<string>, colour?: string, entertainmentLanguage?: string, homeMaterial?: string, page?: number, sizePage?: number, sortBy?: string, sortDirection?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageProductBasicDTO>>;
    public getFilteredProducts(title?: string, description?: string, minProductCost?: number, maxProductCost?: number, brands?: Array<string>, condition?: string, views?: number, userId?: string, uploadDate?: Date, availability?: string, productCategory?: ProductCategory, primaryCat?: string, secondaryCat?: string, tertiaryCat?: string, likesNumber?: number, productGender?: string, sizes?: Array<string>, colour?: string, entertainmentLanguage?: string, homeMaterial?: string, page?: number, sizePage?: number, sortBy?: string, sortDirection?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageProductBasicDTO>>;
    public getFilteredProducts(title?: string, description?: string, minProductCost?: number, maxProductCost?: number, brands?: Array<string>, condition?: string, views?: number, userId?: string, uploadDate?: Date, availability?: string, productCategory?: ProductCategory, primaryCat?: string, secondaryCat?: string, tertiaryCat?: string, likesNumber?: number, productGender?: string, sizes?: Array<string>, colour?: string, entertainmentLanguage?: string, homeMaterial?: string, page?: number, sizePage?: number, sortBy?: string, sortDirection?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

























        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (title !== undefined && title !== null) {
            queryParameters = queryParameters.set('title', <any>title);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (minProductCost !== undefined && minProductCost !== null) {
            queryParameters = queryParameters.set('minProductCost', <any>minProductCost);
        }
        if (maxProductCost !== undefined && maxProductCost !== null) {
            queryParameters = queryParameters.set('maxProductCost', <any>maxProductCost);
        }
        if (brands) {
            brands.forEach((element) => {
                queryParameters = queryParameters.append('brands', <any>element);
            })
        }
        if (condition !== undefined && condition !== null) {
            queryParameters = queryParameters.set('condition', <any>condition);
        }
        if (views !== undefined && views !== null) {
            queryParameters = queryParameters.set('views', <any>views);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (uploadDate !== undefined && uploadDate !== null) {
            queryParameters = queryParameters.set('uploadDate', <any>uploadDate.toISOString());
        }
        if (availability !== undefined && availability !== null) {
            queryParameters = queryParameters.set('availability', <any>availability);
        }
        if (productCategory !== undefined && productCategory !== null) {
            queryParameters = queryParameters.set('productCategory', <any>productCategory);
        }
        if (primaryCat !== undefined && primaryCat !== null) {
            queryParameters = queryParameters.set('primaryCat', <any>primaryCat);
        }
        if (secondaryCat !== undefined && secondaryCat !== null) {
            queryParameters = queryParameters.set('secondaryCat', <any>secondaryCat);
        }
        if (tertiaryCat !== undefined && tertiaryCat !== null) {
            queryParameters = queryParameters.set('tertiaryCat', <any>tertiaryCat);
        }
        if (likesNumber !== undefined && likesNumber !== null) {
            queryParameters = queryParameters.set('likesNumber', <any>likesNumber);
        }
        if (productGender !== undefined && productGender !== null) {
            queryParameters = queryParameters.set('productGender', <any>productGender);
        }
        if (sizes) {
            sizes.forEach((element) => {
                queryParameters = queryParameters.append('sizes', <any>element);
            })
        }
        if (colour !== undefined && colour !== null) {
            queryParameters = queryParameters.set('colour', <any>colour);
        }
        if (entertainmentLanguage !== undefined && entertainmentLanguage !== null) {
            queryParameters = queryParameters.set('entertainmentLanguage', <any>entertainmentLanguage);
        }
        if (homeMaterial !== undefined && homeMaterial !== null) {
            queryParameters = queryParameters.set('homeMaterial', <any>homeMaterial);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (sizePage !== undefined && sizePage !== null) {
            queryParameters = queryParameters.set('sizePage', <any>sizePage);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sortDirection !== undefined && sortDirection !== null) {
            queryParameters = queryParameters.set('sortDirection', <any>sortDirection);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageProductBasicDTO>('get',`${this.basePath}/api/v1/products/filter`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param page 
     * @param size 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMyProducts(page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<PageProductBasicDTO>;
    public getMyProducts(page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageProductBasicDTO>>;
    public getMyProducts(page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageProductBasicDTO>>;
    public getMyProducts(page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageProductBasicDTO>('get',`${this.basePath}/api/v1/products/me`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductGender(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getProductGender(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getProductGender(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getProductGender(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/products/categories/clothing/gender`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param page 
     * @param size 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductLikedByUser(id: string, page: number, size: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getProductLikedByUser(id: string, page: number, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getProductLikedByUser(id: string, page: number, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getProductLikedByUser(id: string, page: number, size: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProductLikedByUser.');
        }

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getProductLikedByUser.');
        }

        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getProductLikedByUser.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/products/likes/users/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param page 
     * @param size 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductMessages(id: string, page: number, size: number, observe?: 'body', reportProgress?: boolean): Observable<PageMessageDTO>;
    public getProductMessages(id: string, page: number, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageMessageDTO>>;
    public getProductMessages(id: string, page: number, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageMessageDTO>>;
    public getProductMessages(id: string, page: number, size: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProductMessages.');
        }

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getProductMessages.');
        }

        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getProductMessages.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageMessageDTO>('get',`${this.basePath}/api/v1/products/${encodeURIComponent(String(id))}/messages`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param page 
     * @param size 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductOffers(id: string, page: number, size: number, observe?: 'body', reportProgress?: boolean): Observable<PageOfferBasicDTO>;
    public getProductOffers(id: string, page: number, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageOfferBasicDTO>>;
    public getProductOffers(id: string, page: number, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageOfferBasicDTO>>;
    public getProductOffers(id: string, page: number, size: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProductOffers.');
        }

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getProductOffers.');
        }

        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getProductOffers.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageOfferBasicDTO>('get',`${this.basePath}/api/v1/products/${encodeURIComponent(String(id))}/offers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductOrder(id: string, observe?: 'body', reportProgress?: boolean): Observable<OrderBasicDTO>;
    public getProductOrder(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderBasicDTO>>;
    public getProductOrder(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderBasicDTO>>;
    public getProductOrder(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProductOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<OrderBasicDTO>('get',`${this.basePath}/api/v1/products/${encodeURIComponent(String(id))}/order`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSizesList(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSizesList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSizesList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSizesList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/products/sizes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public productBasicById(id: string, observe?: 'body', reportProgress?: boolean): Observable<ProductBasicDTO>;
    public productBasicById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProductBasicDTO>>;
    public productBasicById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProductBasicDTO>>;
    public productBasicById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling productBasicById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ProductBasicDTO>('get',`${this.basePath}/api/v1/products/basic/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public productById(id: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public productById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public productById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public productById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling productById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InlineResponse200>('get',`${this.basePath}/api/v1/products/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceProduct(body: ProductsIdBody, id: string, observe?: 'body', reportProgress?: boolean): Observable<ProductsIdBody>;
    public replaceProduct(body: ProductsIdBody, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProductsIdBody>>;
    public replaceProduct(body: ProductsIdBody, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProductsIdBody>>;
    public replaceProduct(body: ProductsIdBody, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replaceProduct.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling replaceProduct.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ProductsIdBody>('put',`${this.basePath}/api/v1/products/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProduct1(body: ProductsIdBody1, id: string, observe?: 'body', reportProgress?: boolean): Observable<ProductsIdBody1>;
    public updateProduct1(body: ProductsIdBody1, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProductsIdBody1>>;
    public updateProduct1(body: ProductsIdBody1, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProductsIdBody1>>;
    public updateProduct1(body: ProductsIdBody1, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateProduct1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateProduct1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ProductsIdBody1>('patch',`${this.basePath}/api/v1/products/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
